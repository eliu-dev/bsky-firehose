services:
  db:
    image: postgres:17
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5

  api:
    build: 
      context: .
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    env_file: .env.development
    environment:
      POSTGRES_HOST: db
      KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_BOOSTRAP_SERVERS}
    depends_on:
      db:
        condition: service_healthy
      kafka:
        condition: service_started
    volumes:
      - .:/app
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    
  
  kafka:
    image: bitnami/kafka:latest
    ports:
      - "9092:9092"
    environment:
      # KRaft settings
      KAFKA_CFG_NODE_ID: 1
      KAFKA_CFG_PROCESS_ROLES: 'broker,controller'
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: '1@localhost:9091'
      
      # Listeners - maintaining separate HOST and DOCKER listeners
      KAFKA_CFG_LISTENERS: 'CONTROLLER://:9091,HOST://:9092,DOCKER://:9093'
      KAFKA_CFG_ADVERTISED_LISTENERS: 'HOST://localhost:9092,DOCKER://kafka:9093'
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,HOST:PLAINTEXT,DOCKER:PLAINTEXT'
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: 'DOCKER'

      # Single node settings
      KAFKA_CFG_NUM_PARTITIONS: 1
      KAFKA_CFG_DEFAULT_REPLICATION_FACTOR: 1
      
      ALLOW_PLAINTEXT_LISTENER: 'yes'
      AUTO_CREATE_TOPICS: true

volumes:
  postgres_data: